apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: {template-KubernetesServiceName}
    kube-monkey/enabled: enabled
    kube-monkey/identifier: {template-KubernetesServiceName}
    kube-monkey/mtbf: '1'
    kube-monkey/kill-mode: "fixed"
    kube-monkey/kill-value: '1'
  name: {template-KubernetesServiceName}
  annotations:
    kubernetes.io/change-cause: "Deployed commit id: ${COMMIT}"
spec:
  replicas: ${REPLICAS}
  selector:
    matchLabels:
      app: {template-KubernetesServiceName}
  strategy:
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 1
    type: RollingUpdate
  template:
    metadata:
      labels:
        app: {template-KubernetesServiceName}
        kube-monkey/enabled: enabled
        kube-monkey/identifier: {template-KubernetesServiceName}
        kube-monkey/mtbf: '1'
        kube-monkey/kill-mode: "fixed"
        kube-monkey/kill-value: '1'
    spec:
      securityContext:
        runAsUser: 1000
        fsGroup: 2000
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - weight: 100
              podAffinityTerm:
                labelSelector:
                  matchExpressions:
                    - key: "app"
                      operator: In
                      values:
                        - {template-KubernetesServiceName}
                topologyKey: kubernetes.io/hostname
      containers:
        - name: {template-KubernetesServiceName}
          securityContext:
            allowPrivilegeEscalation: false
          resources:
            requests:
              memory: 150Mi
            limits:
              memory: 2000Mi
          readinessProbe:
            httpGet:
              path: /health/ready
              port: 8080
            initialDelaySeconds: 30
            periodSeconds: 10
            failureThreshold: 3 # 30 + 10 * 3 = 60 seconds allowed startup time
          livenessProbe:
            httpGet:
              path: /health/live
              port: 8080
            initialDelaySeconds: 20
            periodSeconds: 5
          imagePullPolicy: IfNotPresent
          image: dsparegistry.azurecr.io/dspa/{template-KubernetesServiceName}:${COMMIT}
          ports:
            - containerPort: 8080
          env:
            - name: APPINSIGHTS_INSTRUMENTATIONKEY
              value: "${APPINSIGHTS_INSTRUMENTATIONKEY}"
            - name: APPINSIGHTS_QUICKPULSEAUTHAPIKEY
              value: "${APPINSIGHTS_QUICKPULSEAUTHAPIKEY}"
            - name: DB_CONNECTION_STRING
              value: "${DB_CONNECTION_STRING}"
            - name: API_PATH_PREFIX
              value: "${API_PATH_PREFIX}"
            - name: AZURE_AD_AUTHORITY
              value: "${AZURE_AD_AUTHORITY}"
            - name: AZURE_AD_CLIENT_ID
              value: "${AZURE_AD_CLIENT_ID}"
            - name: LOG_LEVEL
              value: "${LOG_LEVEL}"
            - name: SERVICE_NAME
              value: "${SERVICE_NAME}"
            - name: API_NAME
              value: "${API_NAME}"

      restartPolicy: Always
      imagePullSecrets:
        - name: regcred
---

apiVersion: v1
kind: Service
metadata:
  name: {template-KubernetesServiceName}
spec:
  ports:
    - port: 80
      protocol: TCP
      targetPort: 8080
  selector:
    app: {template-KubernetesServiceName}
  type: ClusterIP
